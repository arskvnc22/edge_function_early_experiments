from openai import OpenAI
import json

client = OpenAI()

# 1. Define a list of callable tools for the model
tools = [
    {
        "type": "function",
        "name": "get_horoscope",
        "description": "Get today's horoscope for an astrological sign.",
        "parameters": {
            "type": "object",
            "properties": {
                "sign": {
                    "type": "string",
                    "description": "An astrological sign like Taurus or Aquarius",
                },
            },
            "required": ["sign"],
        },
    },
    {
        "type": "function",
        "name": "get_weather",
        "description": "Retrieves current weather for the given location.",
        "parameters": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "City and country e.g. BogotÃ¡, Colombia"
                },
                "units": {
                    "type": "string",
                    "enum": ["celsius", "fahrenheit"],
                    "description": "Units the temperature will be returned in."
                }
            },
            "required": ["location", "units"],
        },
        
    },
        {
        "type": "function",
        "name": "calculator",
        "description": "Performs simple arithmetic.",
        "parameters": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "A math expression like '2 + 2 * 3'"
                }
            },
            "required": ["expression"]
        }
    }
]

# Create a running input list we will add to over time
input_list = [
    {"role": "user", "content": "What is my horoscope? I am an Aquarius."}
] # Define the initial user input

# 2. Prompt the model with tools defined
response = client.responses.create(
    model="gpt-4o-mini",
    tools=tools,
    input=input_list,
)
print("Initial response:")
print(response.model_dump_json(indent=2))
# Save function call outputs for subsequent requests
function_call = None
function_call_arguments = None
input_list += response.output

for item in response.output:
    print(f"Item: {item}")
    print(f"Type: {item.type},  item_id: {item.id}, item args: {item.arguments}")
    print(f"  name       : {getattr(item, 'name', None)}")
    print(f"  arguments  : {getattr(item, 'arguments', None)}")
    print(f"  call_id    : {getattr(item, 'call_id', None)}")

    if item.type == "function_call": # Identify function call
        print("Function call detected:")
        function_call = item
        function_call_arguments = json.loads(item.arguments)
        print(f"Parsed arguments: {function_call_arguments}")

def calculator(expression: str):
    try:
        return str(eval(expression))  # Unsafe in prod â€” safe here for demo
    except Exception as e:
        return f"Error: {str(e)}"


def get_horoscope(sign):
    print(f"\nðŸ”¹ Running get_horoscope with sign: {sign}")

    return f"{sign}: Next Tuesday you will befriend a baby otter."


# 3. Execute the function logic for get_horoscope
result = {"horoscope": get_horoscope(function_call_arguments["sign"])}

# 4. Provide function call results to the model
input_list.append({
    "type": "function_call_output",
    "call_id": function_call.call_id,
    "output": json.dumps(result),
})

print("Final input:")
print(input_list)

response = client.responses.create(
    model="gpt-4o-mini",
    instructions="Respond only with a horoscope generated by a tool.",
    tools=tools,
    input=input_list,
)

# 5. The model should be able to give a response!
print("Final output:")
print(response.model_dump_json(indent=2))
print("\n" + response.output_text)